PHPUnit 4.3.3 by Sebastian Bergmann.

Configuration read from /var/www/awesome/phpunit.xml

.[31;1mE[0mobject(Mockery_1_IteratorAggregate_Doctrine_DBAL_Driver_Statement)#549 (17) {
  ["_mockery_expectations":protected]=>
  array(0) {
  }
  ["_mockery_lastExpectation":protected]=>
  NULL
  ["_mockery_ignoreMissing":protected]=>
  bool(false)
  ["_mockery_deferMissing":protected]=>
  bool(false)
  ["_mockery_verified":protected]=>
  bool(false)
  ["_mockery_name":protected]=>
  NULL
  ["_mockery_allocatedOrder":protected]=>
  int(0)
  ["_mockery_currentOrder":protected]=>
  int(0)
  ["_mockery_groups":protected]=>
  array(0) {
  }
  ["_mockery_container":protected]=>
  object(Mockery\Container)#400 (7) {
    ["_mocks":protected]=>
    array(2) {
      ["Mockery_0_Doctrine_DBAL_Connection"]=>
      object(Mockery_0_Doctrine_DBAL_Connection)#509 (30) {
        ["_mockery_expectations":protected]=>
        array(1) {
          ["fetchAssoc"]=>
          object(Mockery\ExpectationDirector)#384 (5) {
            ["_name":protected]=>
            string(10) "fetchAssoc"
            ["_mock":protected]=>
            *RECURSION*
            ["_expectations":protected]=>
            array(1) {
              [0]=>
              object(Mockery\Expectation)#581 (15) {
                ["_mock":protected]=>
                *RECURSION*
                ["_name":protected]=>
                string(10) "fetchAssoc"
                ["_expectedArgs":protected]=>
                array(2) {
                  [0]=>
                  string(38) "SELECT username FROM user WHERE id = ?"
                  [1]=>
                  array(1) {
                    [0]=>
                    int(1)
                  }
                }
                ["_countValidators":protected]=>
                array(0) {
                }
                ["_countValidatorClass":protected]=>
                string(28) "Mockery\CountValidator\Exact"
                ["_actualCount":protected]=>
                int(0)
                ["_returnValue":protected]=>
                NULL
                ["_returnQueue":protected]=>
                array(1) {
                  [0]=>
                  *RECURSION*
                }
                ["_closureQueue":protected]=>
                array(0) {
                }
                ["_orderNumber":protected]=>
                NULL
                ["_globalOrderNumber":protected]=>
                NULL
                ["_throw":protected]=>
                bool(false)
                ["_globally":protected]=>
                bool(false)
                ["_noArgsExpectation":protected]=>
                bool(false)
                ["_passthru":protected]=>
                bool(false)
              }
            }
            ["_expectedOrder":protected]=>
            NULL
            ["_defaults":protected]=>
            array(0) {
            }
          }
        }
        ["_mockery_lastExpectation":protected]=>
        NULL
        ["_mockery_ignoreMissing":protected]=>
        bool(false)
        ["_mockery_deferMissing":protected]=>
        bool(false)
        ["_mockery_verified":protected]=>
        bool(false)
        ["_mockery_name":protected]=>
        NULL
        ["_mockery_allocatedOrder":protected]=>
        int(0)
        ["_mockery_currentOrder":protected]=>
        int(0)
        ["_mockery_groups":protected]=>
        array(0) {
        }
        ["_mockery_container":protected]=>
        *RECURSION*
        ["_mockery_partial":protected]=>
        NULL
        ["_mockery_disableExpectationMatching":protected]=>
        bool(false)
        ["_mockery_mockableProperties":protected]=>
        array(0) {
        }
        ["_mockery_mockableMethods":protected]=>
        array(0) {
        }
        ["_mockery_allowMockingProtectedMethods":protected]=>
        bool(false)
        ["_mockery_receivedMethodCalls":protected]=>
        NULL
        ["_mockery_defaultReturnValue":protected]=>
        NULL
        ["_conn":protected]=>
        NULL
        ["_config":protected]=>
        NULL
        ["_eventManager":protected]=>
        NULL
        ["_expr":protected]=>
        NULL
        ["_isConnected":"Doctrine\DBAL\Connection":private]=>
        bool(false)
        ["_transactionNestingLevel":"Doctrine\DBAL\Connection":private]=>
        int(0)
        ["_transactionIsolationLevel":"Doctrine\DBAL\Connection":private]=>
        NULL
        ["_nestTransactionsWithSavepoints":"Doctrine\DBAL\Connection":private]=>
        NULL
        ["_params":"Doctrine\DBAL\Connection":private]=>
        array(0) {
        }
        ["_platform":protected]=>
        NULL
        ["_schemaManager":protected]=>
        NULL
        ["_driver":protected]=>
        NULL
        ["_isRollbackOnly":"Doctrine\DBAL\Connection":private]=>
        bool(false)
      }
      ["Mockery_1_IteratorAggregate_Doctrine_DBAL_Driver_Statement"]=>
      *RECURSION*
    }
    ["_allocatedOrder":protected]=>
    int(0)
    ["_currentOrder":protected]=>
    int(0)
    ["_groups":protected]=>
    array(0) {
    }
    ["_generator":protected]=>
    object(Mockery\Generator\CachingGenerator)#390 (2) {
      ["generator":protected]=>
      object(Mockery\Generator\StringManipulationGenerator)#399 (1) {
        ["passes":protected]=>
        array(8) {
          [0]=>
          object(Mockery\Generator\StringManipulation\Pass\CallTypeHintPass)#398 (0) {
          }
          [1]=>
          object(Mockery\Generator\StringManipulation\Pass\ClassPass)#397 (0) {
          }
          [2]=>
          object(Mockery\Generator\StringManipulation\Pass\ClassNamePass)#396 (0) {
          }
          [3]=>
          object(Mockery\Generator\StringManipulation\Pass\InstanceMockPass)#395 (0) {
          }
          [4]=>
          object(Mockery\Generator\StringManipulation\Pass\InterfacePass)#394 (0) {
          }
          [5]=>
          object(Mockery\Generator\StringManipulation\Pass\MethodDefinitionPass)#393 (0) {
          }
          [6]=>
          object(Mockery\Generator\StringManipulation\Pass\RemoveUnserializeForInternalSerializableClassesPass)#392 (0) {
          }
          [7]=>
          object(Mockery\Generator\StringManipulation\Pass\RemoveBuiltinMethodsThatAreFinalPass)#391 (1) {
            ["methods":protected]=>
            array(1) {
              ["__wakeup"]=>
              string(42) "/public function __wakeup\(\)\s+\{.*?\}/sm"
            }
          }
        }
      }
      ["cache":protected]=>
      array(2) {
        ["0f1dd36a3e99974c2a91de0f04fd6818"]=>
        object(Mockery\Generator\MockDefinition)#568 (2) {
          ["config":protected]=>
          object(Mockery\Generator\MockConfiguration)#383 (11) {
            ["targetClass":protected]=>
            object(Mockery\Generator\DefinedTargetClass)#382 (1) {
              ["rfc":"Mockery\Generator\DefinedTargetClass":private]=>
              object(ReflectionClass)#381 (1) {
                ["name"]=>
                string(24) "Doctrine\DBAL\Connection"
              }
            }
            ["targetClassName":protected]=>
            string(25) "\Doctrine\DBAL\Connection"
            ["targetInterfaces":protected]=>
            array(0) {
            }
            ["targetInterfaceNames":protected]=>
            array(0) {
            }
            ["targetObject":protected]=>
            NULL
            ["name":protected]=>
            string(34) "Mockery_0_Doctrine_DBAL_Connection"
            ["blackListedMethods":protected]=>
            array(74) {
              [0]=>
              string(6) "__call"
              [1]=>
              string(12) "__callStatic"
              [2]=>
              string(7) "__clone"
              [3]=>
              string(8) "__wakeup"
              [4]=>
              string(5) "__set"
              [5]=>
              string(5) "__get"
              [6]=>
              string(10) "__toString"
              [7]=>
              string(7) "__isset"
              [8]=>
              string(10) "__destruct"
              [9]=>
              string(15) "__halt_compiler"
              [10]=>
              string(8) "abstract"
              [11]=>
              string(3) "and"
              [12]=>
              string(5) "array"
              [13]=>
              string(2) "as"
              [14]=>
              string(5) "break"
              [15]=>
              string(8) "callable"
              [16]=>
              string(4) "case"
              [17]=>
              string(5) "catch"
              [18]=>
              string(5) "class"
              [19]=>
              string(5) "clone"
              [20]=>
              string(5) "const"
              [21]=>
              string(8) "continue"
              [22]=>
              string(7) "declare"
              [23]=>
              string(7) "default"
              [24]=>
              string(3) "die"
              [25]=>
              string(2) "do"
              [26]=>
              string(4) "echo"
              [27]=>
              string(4) "else"
              [28]=>
              string(6) "elseif"
              [29]=>
              string(5) "empty"
              [30]=>
              string(10) "enddeclare"
              [31]=>
              string(6) "endfor"
              [32]=>
              string(10) "endforeach"
              [33]=>
              string(5) "endif"
              [34]=>
              string(9) "endswitch"
              [35]=>
              string(8) "endwhile"
              [36]=>
              string(4) "eval"
              [37]=>
              string(4) "exit"
              [38]=>
              string(7) "extends"
              [39]=>
              string(5) "final"
              [40]=>
              string(3) "for"
              [41]=>
              string(7) "foreach"
              [42]=>
              string(8) "function"
              [43]=>
              string(6) "global"
              [44]=>
              string(4) "goto"
              [45]=>
              string(2) "if"
              [46]=>
              string(10) "implements"
              [47]=>
              string(7) "include"
              [48]=>
              string(12) "include_once"
              [49]=>
              string(10) "instanceof"
              [50]=>
              string(9) "insteadof"
              [51]=>
              string(9) "interface"
              [52]=>
              string(5) "isset"
              [53]=>
              string(4) "list"
              [54]=>
              string(9) "namespace"
              [55]=>
              string(3) "new"
              [56]=>
              string(2) "or"
              [57]=>
              string(5) "print"
              [58]=>
              string(7) "private"
              [59]=>
              string(9) "protected"
              [60]=>
              string(6) "public"
              [61]=>
              string(7) "require"
              [62]=>
              string(12) "require_once"
              [63]=>
              string(6) "return"
              [64]=>
              string(6) "static"
              [65]=>
              string(6) "switch"
              [66]=>
              string(5) "throw"
              [67]=>
              string(5) "trait"
              [68]=>
              string(3) "try"
              [69]=>
              string(5) "unset"
              [70]=>
              string(3) "use"
              [71]=>
              string(3) "var"
              [72]=>
              string(5) "while"
              [73]=>
              string(3) "xor"
            }
            ["whiteListedMethods":protected]=>
            array(0) {
            }
            ["instanceMock":protected]=>
            bool(false)
            ["parameterOverrides":protected]=>
            array(0) {
            }
            ["allMethods":protected]=>
            array(58) {
              [0]=>
              object(Mockery\Generator\Method)#323 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#379 (2) {
                  ["name"]=>
                  string(11) "__construct"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [1]=>
              object(Mockery\Generator\Method)#313 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#378 (2) {
                  ["name"]=>
                  string(9) "getParams"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [2]=>
              object(Mockery\Generator\Method)#312 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#377 (2) {
                  ["name"]=>
                  string(11) "getDatabase"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [3]=>
              object(Mockery\Generator\Method)#311 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#376 (2) {
                  ["name"]=>
                  string(7) "getHost"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [4]=>
              object(Mockery\Generator\Method)#310 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#375 (2) {
                  ["name"]=>
                  string(7) "getPort"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [5]=>
              object(Mockery\Generator\Method)#309 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#374 (2) {
                  ["name"]=>
                  string(11) "getUsername"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [6]=>
              object(Mockery\Generator\Method)#308 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#373 (2) {
                  ["name"]=>
                  string(11) "getPassword"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [7]=>
              object(Mockery\Generator\Method)#307 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#372 (2) {
                  ["name"]=>
                  string(9) "getDriver"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [8]=>
              object(Mockery\Generator\Method)#306 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#371 (2) {
                  ["name"]=>
                  string(16) "getConfiguration"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [9]=>
              object(Mockery\Generator\Method)#305 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#370 (2) {
                  ["name"]=>
                  string(15) "getEventManager"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [10]=>
              object(Mockery\Generator\Method)#304 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#369 (2) {
                  ["name"]=>
                  string(19) "getDatabasePlatform"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [11]=>
              object(Mockery\Generator\Method)#303 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#368 (2) {
                  ["name"]=>
                  string(20) "getExpressionBuilder"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [12]=>
              object(Mockery\Generator\Method)#302 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#367 (2) {
                  ["name"]=>
                  string(7) "connect"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [13]=>
              object(Mockery\Generator\Method)#301 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#366 (2) {
                  ["name"]=>
                  string(10) "fetchAssoc"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [14]=>
              object(Mockery\Generator\Method)#300 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#365 (2) {
                  ["name"]=>
                  string(10) "fetchArray"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [15]=>
              object(Mockery\Generator\Method)#299 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#364 (2) {
                  ["name"]=>
                  string(11) "fetchColumn"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [16]=>
              object(Mockery\Generator\Method)#298 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#363 (2) {
                  ["name"]=>
                  string(11) "isConnected"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [17]=>
              object(Mockery\Generator\Method)#297 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#362 (2) {
                  ["name"]=>
                  string(19) "isTransactionActive"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [18]=>
              object(Mockery\Generator\Method)#296 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#361 (2) {
                  ["name"]=>
                  string(6) "delete"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [19]=>
              object(Mockery\Generator\Method)#295 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#360 (2) {
                  ["name"]=>
                  string(5) "close"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [20]=>
              object(Mockery\Generator\Method)#294 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#359 (2) {
                  ["name"]=>
                  string(23) "setTransactionIsolation"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [21]=>
              object(Mockery\Generator\Method)#293 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#358 (2) {
                  ["name"]=>
                  string(23) "getTransactionIsolation"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [22]=>
              object(Mockery\Generator\Method)#291 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#357 (2) {
                  ["name"]=>
                  string(6) "update"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [23]=>
              object(Mockery\Generator\Method)#292 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#356 (2) {
                  ["name"]=>
                  string(6) "insert"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [24]=>
              object(Mockery\Generator\Method)#254 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#355 (2) {
                  ["name"]=>
                  string(10) "setCharset"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [25]=>
              object(Mockery\Generator\Method)#287 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#354 (2) {
                  ["name"]=>
                  string(15) "quoteIdentifier"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [26]=>
              object(Mockery\Generator\Method)#289 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#353 (2) {
                  ["name"]=>
                  string(5) "quote"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [27]=>
              object(Mockery\Generator\Method)#259 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#352 (2) {
                  ["name"]=>
                  string(8) "fetchAll"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [28]=>
              object(Mockery\Generator\Method)#260 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#351 (2) {
                  ["name"]=>
                  string(7) "prepare"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [29]=>
              object(Mockery\Generator\Method)#261 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#350 (2) {
                  ["name"]=>
                  string(12) "executeQuery"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [30]=>
              object(Mockery\Generator\Method)#262 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#349 (2) {
                  ["name"]=>
                  string(17) "executeCacheQuery"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [31]=>
              object(Mockery\Generator\Method)#263 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#348 (2) {
                  ["name"]=>
                  string(7) "project"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [32]=>
              object(Mockery\Generator\Method)#264 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#347 (2) {
                  ["name"]=>
                  string(5) "query"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [33]=>
              object(Mockery\Generator\Method)#265 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#346 (2) {
                  ["name"]=>
                  string(13) "executeUpdate"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [34]=>
              object(Mockery\Generator\Method)#266 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#345 (2) {
                  ["name"]=>
                  string(4) "exec"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [35]=>
              object(Mockery\Generator\Method)#267 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#344 (2) {
                  ["name"]=>
                  string(26) "getTransactionNestingLevel"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [36]=>
              object(Mockery\Generator\Method)#268 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#343 (2) {
                  ["name"]=>
                  string(9) "errorCode"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [37]=>
              object(Mockery\Generator\Method)#269 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#342 (2) {
                  ["name"]=>
                  string(9) "errorInfo"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [38]=>
              object(Mockery\Generator\Method)#278 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#341 (2) {
                  ["name"]=>
                  string(12) "lastInsertId"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [39]=>
              object(Mockery\Generator\Method)#279 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#340 (2) {
                  ["name"]=>
                  string(13) "transactional"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [40]=>
              object(Mockery\Generator\Method)#272 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#339 (2) {
                  ["name"]=>
                  string(33) "setNestTransactionsWithSavepoints"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [41]=>
              object(Mockery\Generator\Method)#273 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#338 (2) {
                  ["name"]=>
                  string(33) "getNestTransactionsWithSavepoints"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [42]=>
              object(Mockery\Generator\Method)#315 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#337 (2) {
                  ["name"]=>
                  string(34) "_getNestedTransactionSavePointName"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [43]=>
              object(Mockery\Generator\Method)#318 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#336 (2) {
                  ["name"]=>
                  string(16) "beginTransaction"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [44]=>
              object(Mockery\Generator\Method)#319 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#335 (2) {
                  ["name"]=>
                  string(6) "commit"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [45]=>
              object(Mockery\Generator\Method)#320 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#334 (2) {
                  ["name"]=>
                  string(8) "rollback"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [46]=>
              object(Mockery\Generator\Method)#316 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#333 (2) {
                  ["name"]=>
                  string(15) "createSavepoint"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [47]=>
              object(Mockery\Generator\Method)#321 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#332 (2) {
                  ["name"]=>
                  string(16) "releaseSavepoint"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [48]=>
              object(Mockery\Generator\Method)#317 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#331 (2) {
                  ["name"]=>
                  string(17) "rollbackSavepoint"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [49]=>
              object(Mockery\Generator\Method)#276 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#330 (2) {
                  ["name"]=>
                  string(20) "getWrappedConnection"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [50]=>
              object(Mockery\Generator\Method)#48 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#329 (2) {
                  ["name"]=>
                  string(16) "getSchemaManager"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [51]=>
              object(Mockery\Generator\Method)#47 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#327 (2) {
                  ["name"]=>
                  string(15) "setRollbackOnly"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [52]=>
              object(Mockery\Generator\Method)#157 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#328 (2) {
                  ["name"]=>
                  string(14) "isRollbackOnly"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [53]=>
              object(Mockery\Generator\Method)#168 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#325 (2) {
                  ["name"]=>
                  string(22) "convertToDatabaseValue"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [54]=>
              object(Mockery\Generator\Method)#167 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#326 (2) {
                  ["name"]=>
                  string(17) "convertToPHPValue"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [55]=>
              object(Mockery\Generator\Method)#166 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#322 (2) {
                  ["name"]=>
                  string(16) "_bindTypedValues"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [56]=>
              object(Mockery\Generator\Method)#162 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#324 (2) {
                  ["name"]=>
                  string(14) "getBindingInfo"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
              [57]=>
              object(Mockery\Generator\Method)#164 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#275 (2) {
                  ["name"]=>
                  string(18) "createQueryBuilder"
                  ["class"]=>
                  string(24) "Doctrine\DBAL\Connection"
                }
              }
            }
          }
          ["code":protected]=>
          string(32036) "<?php
/**
 * Mockery
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://github.com/padraic/mockery/blob/master/LICENSE
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to padraic@php.net so we can send you a copy immediately.
 *
 * @category   Mockery
 * @package    Mockery
 * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
 */



use Mockery\MockInterface;

class Mockery_0_Doctrine_DBAL_Connection extends \Doctrine\DBAL\Connection implements MockInterface
{

    /**
     * Stores an array of all expectation directors for this mock
     *
     * @var array
     */
    protected $_mockery_expectations = array();

    /**
     * Last expectation that was set
     *
     * @var object
     */
    protected $_mockery_lastExpectation = null;

    /**
     * Flag to indicate whether we can ignore method calls missing from our
     * expectations
     *
     * @var bool
     */
    protected $_mockery_ignoreMissing = false;

    /**
     * Flag to indicate whether we can defer method calls missing from our
     * expectations
     *
     * @var bool
     */
    protected $_mockery_deferMissing = false;

    /**
     * Flag to indicate whether this mock was verified
     *
     * @var bool
     */
    protected $_mockery_verified = false;

    /**
     * Given name of the mock
     *
     * @var string
     */
    protected $_mockery_name = null;

    /**
     * Order number of allocation
     *
     * @var int
     */
    protected $_mockery_allocatedOrder = 0;

    /**
     * Current ordered number
     *
     * @var int
     */
    protected $_mockery_currentOrder = 0;

    /**
     * Ordered groups
     *
     * @var array
     */
    protected $_mockery_groups = array();

    /**
     * Mock container containing this mock object
     *
     * @var \Mockery\Container
     */
    protected $_mockery_container = null;

    /**
     * Instance of a core object on which methods are called in the event
     * it has been set, and an expectation for one of the object's methods
     * does not exist. This implements a simple partial mock proxy system.
     *
     * @var object
     */
    protected $_mockery_partial = null;

    /**
     * Flag to indicate we should ignore all expectations temporarily. Used
     * mainly to prevent expectation matching when in the middle of a mock
     * object recording session.
     *
     * @var bool
     */
    protected $_mockery_disableExpectationMatching = false;

    /**
     * Stores all stubbed public methods separate from any on-object public
     * properties that may exist.
     *
     * @var array
     */
    protected $_mockery_mockableProperties = array();

    /**
     * @var array
     */
    protected $_mockery_mockableMethods = array();

    /**
     * Just a local cache for this mock's target's methods
     *
     * @var ReflectionMethod[]
     */
    protected static $_mockery_methods;

    protected $_mockery_allowMockingProtectedMethods = false;

    protected $_mockery_receivedMethodCalls;

    /**
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods
     * @var mixed
     */
    protected $_mockery_defaultReturnValue = null;

    /**
     * We want to avoid constructors since class is copied to Generator.php
     * for inclusion on extending class definitions.
     *
     * @param \Mockery\Container $container
     * @param object $partialObject
     * @return void
     */
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null)
    {
        if(is_null($container)) {
            $container = new \Mockery\Container;
        }
        $this->_mockery_container = $container;
        if (!is_null($partialObject)) {
            $this->_mockery_partial = $partialObject;
        }

        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {
            foreach ($this->mockery_getMethods() as $method) {
                if ($method->isPublic() && !$method->isStatic()) $this->_mockery_mockableMethods[] = $method->getName();
            }
        }
    }

    /**
     * Set expected method calls
     *
     * @param mixed
     * @return \Mockery\Expectation
     */
    public function shouldReceive()
    {
        /** @var array $nonPublicMethods */
        $nonPublicMethods = $this->getNonPublicMethods();

        $self = $this;
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;

        $lastExpectation = \Mockery::parseShouldReturnArgs(
            $this, func_get_args(), function ($method) use ($self, $nonPublicMethods, $allowMockingProtectedMethods) {
                $rm = $self->mockery_getMethod($method);
                if ($rm) {
                    if ($rm->isPrivate()) {
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");
                    }
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {
                        throw new \InvalidArgumentException("$method() cannot be mocked as it a protected method and mocking protected methods is not allowed for this mock");
                    }
                }

                $director = $self->mockery_getExpectationsFor($method);
                if (!$director) {
                    $director = new \Mockery\ExpectationDirector($method, $self);
                    $self->mockery_setExpectationsFor($method, $director);
                }
                $expectation = new \Mockery\Expectation($self, $method);
                $director->addExpectation($expectation);
                return $expectation;
            }
        );
        return $lastExpectation;
    }

    /**
     * Allows additional methods to be mocked that do not explicitly exist on mocked class
     * @param String $method name of the method to be mocked
     * @return Mock
     */
    public function shouldAllowMockingMethod($method)
    {
        $this->_mockery_mockableMethods[] = $method;
        return $this;
    }

    /**
     * Set mock to ignore unexpected methods and return Undefined class
     * @param mixed $returnValue the default return value for calls to missing functions on this mock
     * @return Mock
     */
    public function shouldIgnoreMissing($returnValue = null)
    {
        $this->_mockery_ignoreMissing = true;
        $this->_mockery_defaultReturnValue = $returnValue;
        return $this;
    }

    public function asUndefined()
    {
        $this->_mockery_ignoreMissing = true;
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;
        return $this;
    }

    /**
     * @return Mock
     */
    public function shouldAllowMockingProtectedMethods()
    {
        $this->_mockery_allowMockingProtectedMethods = true;
        return $this;
    }


    /**
     * Set mock to defer unexpected methods to it's parent
     *
     * This is particularly useless for this class, as it doesn't have a parent,
     * but included for completeness
     *
     * @return Mock
     */
    public function shouldDeferMissing()
    {
        $this->_mockery_deferMissing = true;
        return $this;
    }

    /**
     * Create an obviously worded alias to shouldDeferMissing()
     *
     * @return Mock
     */
    public function makePartial()
    {
        return $this->shouldDeferMissing();
    }

    /**
     * Accepts a closure which is executed with an object recorder which proxies
     * to the partial source object. The intent being to record the
     * interactions of a concrete object as a set of expectations on the
     * current mock object. The partial may then be passed to a second process
     * to see if it fulfils the same (or exact same) contract as the original.
     *
     * @param Closure $closure
     */
    public function shouldExpect(\Closure $closure)
    {
        $recorder = new \Mockery\Recorder($this, $this->_mockery_partial);
        $this->_mockery_disableExpectationMatching = true;
        $closure($recorder);
        $this->_mockery_disableExpectationMatching = false;
        return $this;
    }

    /**
     * In the event shouldReceive() accepting one or more methods/returns,
     * this method will switch them from normal expectations to default
     * expectations
     *
     * @return self
     */
    public function byDefault()
    {
        foreach ($this->_mockery_expectations as $director) {
            $exps = $director->getExpectations();
            foreach ($exps as $exp) {
                $exp->byDefault();
            }
        }
        return $this;
    }

    /**
     * Capture calls to this mock
     */
    public function __call($method, array $args)
    {
        return $this->_mockery_handleMethodCall($method, $args);
    }

    public static function __callStatic($method, array $args)
    {
        return self::_mockery_handleStaticMethodCall($method, $args);
    }

    /**
     * Forward calls to this magic method to the __call method
     */
    public function __toString()
    {
        return $this->__call('__toString', array());
    }

    /**public function __set($name, $value)
    {
        $this->_mockery_mockableProperties[$name] = $value;
        return $this;
    }

    public function __get($name)
    {
        if (isset($this->_mockery_mockableProperties[$name])) {
            return $this->_mockery_mockableProperties[$name];
        } elseif(isset($this->{$name})) {
            return $this->{$name};
        }
        throw new \InvalidArgumentException (
            'Property ' . __CLASS__ . '::' . $name . ' does not exist on this mock object'
        );
    }**/

    /**
     * Iterate across all expectation directors and validate each
     *
     * @throws \Mockery\CountValidator\Exception
     * @return void
     */
    public function mockery_verify()
    {
        if ($this->_mockery_verified) return true;
        if (isset($this->_mockery_ignoreVerification)
            && $this->_mockery_ignoreVerification == true) {
            return true;
        }
        $this->_mockery_verified = true;
        foreach($this->_mockery_expectations as $director) {
            $director->verify();
        }
    }

    /**
     * Tear down tasks for this mock
     *
     * @return void
     */
    public function mockery_teardown()
    {

    }

    /**
     * Fetch the next available allocation order number
     *
     * @return int
     */
    public function mockery_allocateOrder()
    {
        $this->_mockery_allocatedOrder += 1;
        return $this->_mockery_allocatedOrder;
    }

    /**
     * Set ordering for a group
     *
     * @param mixed $group
     * @param int $order
     */
    public function mockery_setGroup($group, $order)
    {
        $this->_mockery_groups[$group] = $order;
    }

    /**
     * Fetch array of ordered groups
     *
     * @return array
     */
    public function mockery_getGroups()
    {
        return $this->_mockery_groups;
    }

    /**
     * Set current ordered number
     *
     * @param int $order
     */
    public function mockery_setCurrentOrder($order)
    {
        $this->_mockery_currentOrder = $order;
        return $this->_mockery_currentOrder;
    }

    /**
     * Get current ordered number
     *
     * @return int
     */
    public function mockery_getCurrentOrder()
    {
        return $this->_mockery_currentOrder;
    }

    /**
     * Validate the current mock's ordering
     *
     * @param string $method
     * @param int $order
     * @throws \Mockery\Exception
     * @return void
     */
    public function mockery_validateOrder($method, $order)
    {
        if ($order < $this->_mockery_currentOrder) {
            $exception = new \Mockery\Exception\InvalidOrderException(
                'Method ' . __CLASS__ . '::' . $method . '()'
                . ' called out of order: expected order '
                . $order . ', was ' . $this->_mockery_currentOrder
            );
            $exception->setMock($this)
                ->setMethodName($method)
                ->setExpectedOrder($order)
                ->setActualOrder($this->_mockery_currentOrder);
            throw $exception;
        }
        $this->mockery_setCurrentOrder($order);
    }

    /**
     * Gets the count of expectations for this mock
     *
     * @return int
     */
    public function mockery_getExpectationCount()
    {
        $count = 0;
        foreach($this->_mockery_expectations as $director) {
            $count += $director->getExpectationCount();
        }
        return $count;
    }

    /**
     * Return the expectations director for the given method
     *
     * @var string $method
     * @return \Mockery\ExpectationDirector|null
     */
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)
    {
        $this->_mockery_expectations[$method] = $director;
    }

    /**
     * Return the expectations director for the given method
     *
     * @var string $method
     * @return \Mockery\ExpectationDirector|null
     */
    public function mockery_getExpectationsFor($method)
    {
        if (isset($this->_mockery_expectations[$method])) {
            return $this->_mockery_expectations[$method];
        }
    }

    /**
     * Find an expectation matching the given method and arguments
     *
     * @var string $method
     * @var array $args
     * @return \Mockery\Expectation|null
     */
    public function mockery_findExpectation($method, array $args)
    {
        if (!isset($this->_mockery_expectations[$method])) {
            return null;
        }
        $director = $this->_mockery_expectations[$method];

        return $director->findExpectation($args);
    }

    /**
     * Return the container for this mock
     *
     * @return \Mockery\Container
     */
    public function mockery_getContainer()
    {
        return $this->_mockery_container;
    }

    /**
     * Return the name for this mock
     *
     * @return string
     */
    public function mockery_getName()
    {
        return __CLASS__;
    }

    /**
     * @return array
     */
    public function mockery_getMockableProperties()
    {
        return $this->_mockery_mockableProperties;
    }

    public function __isset($name)
    {
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {
            return parent::__isset($name);
        }
    }

    public function mockery_getExpectations()
    {
        return $this->_mockery_expectations;
    }

    /**
     * Calls a parent class method and returns the result. Used in a passthru
     * expectation where a real return value is required while still taking
     * advantage of expectation matching and call count verification.
     *
     * @param string $name
     * @param array $args
     * @return mixed
     */
    public function mockery_callSubjectMethod($name, array $args)
    {
        return call_user_func_array('parent::' . $name, $args);
    }

    /**
     * @return string[]
     */
    public function mockery_getMockableMethods()
    {
        return $this->_mockery_mockableMethods;
    }

    /**
     * @return bool
     */
    public function mockery_isAnonymous()
    {
        $rfc = new \ReflectionClass($this);
        return false === $rfc->getParentClass();
    }

    public function __wakeup()
    {
        /**
         * This does not add __wakeup method support. It's a blind method and any
         * expected __wakeup work will NOT be performed. It merely cuts off
         * annoying errors where a __wakeup exists but is not essential when
         * mocking
         */
    }

    public function mockery_getMethod($name)
    {
        foreach ($this->mockery_getMethods() as $method) {
            if ($method->getName() == $name) {
                return $method;
            }
        }

        return null;
    }

    public function shouldHaveReceived($method, $args = null)
    {
        $expectation = new \Mockery\VerificationExpectation($this, $method);
        if (null !== $args) {
            $expectation->withArgs($args);
        }
        $expectation->atLeast()->once();
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);
        $director->verify();
        return $director;
    }

    public function shouldNotHaveReceived($method, $args = null)
    {
        $expectation = new \Mockery\VerificationExpectation($this, $method);
        if (null !== $args) {
            $expectation->withArgs($args);
        }
        $expectation->never();
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);
        $director->verify();
        return null;
    }

    protected static function _mockery_handleStaticMethodCall($method, array $args)
    {
        try {
            $associatedRealObject = \Mockery::fetchMock(__CLASS__);
            return $associatedRealObject->__call($method, $args);
        } catch (\BadMethodCallException $e) {
            throw new \BadMethodCallException(
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method
                . '() does not exist on this mock object'
            );
        }
    }

    protected function _mockery_getReceivedMethodCalls()
    {
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();
    }

    protected function _mockery_handleMethodCall($method, array $args)
    {
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));

        $rm = $this->mockery_getMethod($method);
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {
            if ($rm->isAbstract()) {
                return;
            }

            try {
                $prototype = $rm->getPrototype();
                if ($prototype->isAbstract()) {
                    return;
                }
            } catch (\ReflectionException $re) {
                // noop - there is no hasPrototype method
            }

            return call_user_func_array("parent::$method", $args);
        }

        if (isset($this->_mockery_expectations[$method])
        && !$this->_mockery_disableExpectationMatching) {
            $handler = $this->_mockery_expectations[$method];

            try {
                return $handler->call($args);
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {
                    throw $e;
                }
            }
        }

        if (!is_null($this->_mockery_partial) && method_exists($this->_mockery_partial, $method)) {
            return call_user_func_array(array($this->_mockery_partial, $method), $args);
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")) {
            return call_user_func_array("parent::$method", $args);
        } elseif ($method == '__toString') {
            // __toString is special because we force its addition to the class API regardless of the
            // original implementation.  Thus, we should always return a string rather than honor
            // _mockery_ignoreMissing and break the API with an error.
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));
        } elseif ($this->_mockery_ignoreMissing) {
            if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined)
                return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);
            else
                return $this->_mockery_defaultReturnValue;
        }
        throw new \BadMethodCallException(
            'Method ' . __CLASS__ . '::' . $method . '() does not exist on this mock object'
        );
    }

    protected function mockery_getMethods()
    {
        if (static::$_mockery_methods) {
            return static::$_mockery_methods;
        }

        $methods = array();

        if (isset($this->_mockery_partial)) {
            $reflected = new \ReflectionObject($this->_mockery_partial);
            $methods = $reflected->getMethods();
        } else {
            $reflected = new \ReflectionClass($this);
            foreach ($reflected->getMethods() as $method) {
                try {
                    $methods[] = $method->getPrototype();
                } catch (\ReflectionException $re) {
                    /**
                     * For some reason, private methods don't have a prototype
                     */
                    if ($method->isPrivate()) {
                        $methods[] = $method;
                    }
                }
            }
        }

        return static::$_mockery_methods = $methods;
    }

    /**
     * @return array
     */
    private function getNonPublicMethods()
    {
        return array_map(
            function ($method) {
                return $method->getName();
            },
            array_filter($this->mockery_getMethods(), function ($method) {
                return !$method->isPublic();
            })
        );
    }

public function __construct(array$params, Doctrine\DBAL\Driver$driver, Doctrine\DBAL\Configuration$config = NULL, Doctrine\Common\EventManager$eventManager = NULL){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getParams(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getDatabase(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getHost(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getPort(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getUsername(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getPassword(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getDriver(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getConfiguration(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getEventManager(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getDatabasePlatform(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getExpressionBuilder(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function connect(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function fetchAssoc($statement, array$params = array (
)){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function fetchArray($statement, array$params = array (
)){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function fetchColumn($statement, array$params = array (
), $colnum = 0){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function isConnected(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function isTransactionActive(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function delete($tableName, array$identifier){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function close(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function setTransactionIsolation($level){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getTransactionIsolation(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function update($tableName, array$data, array$identifier, array$types = array (
)){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function insert($tableName, array$data, array$types = array (
)){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function setCharset($charset){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function quoteIdentifier($str){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function quote($input, $type = NULL){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function fetchAll($sql, array$params = array (
)){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function prepare($statement){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function executeQuery($query, array$params = array (
), $types = array (
), Doctrine\DBAL\Cache\QueryCacheProfile$qcp = NULL){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function executeCacheQuery($query, $params, $types, Doctrine\DBAL\Cache\QueryCacheProfile$qcp){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function project($query, array$params, Closure$function){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function query(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function executeUpdate($query, array$params = array (
), array$types = array (
)){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function exec($statement){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getTransactionNestingLevel(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function errorCode(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function errorInfo(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function lastInsertId($seqName = NULL){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function transactional(Closure$func){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function setNestTransactionsWithSavepoints($nestTransactionsWithSavepoints){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getNestTransactionsWithSavepoints(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    protected function _getNestedTransactionSavePointName(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function beginTransaction(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function commit(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function rollback(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function createSavepoint($savepoint){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function releaseSavepoint($savepoint){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function rollbackSavepoint($savepoint){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getWrappedConnection(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function getSchemaManager(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function setRollbackOnly(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function isRollbackOnly(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function convertToDatabaseValue($value, $type){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function convertToPHPValue($value, $type){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    private function _bindTypedValues($stmt, array$params, array$types){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    private function getBindingInfo($value, $type){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function createQueryBuilder(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    }
"
        }
        ["26b3abd15c5811f76a0be8ac0de870ea"]=>
        object(Mockery\Generator\MockDefinition)#490 (2) {
          ["config":protected]=>
          object(Mockery\Generator\MockConfiguration)#508 (11) {
            ["targetClass":protected]=>
            NULL
            ["targetClassName":protected]=>
            NULL
            ["targetInterfaces":protected]=>
            array(2) {
              [0]=>
              object(Mockery\Generator\DefinedTargetClass)#505 (1) {
                ["rfc":"Mockery\Generator\DefinedTargetClass":private]=>
                object(ReflectionClass)#506 (1) {
                  ["name"]=>
                  string(17) "IteratorAggregate"
                }
              }
              [1]=>
              object(Mockery\Generator\DefinedTargetClass)#510 (1) {
                ["rfc":"Mockery\Generator\DefinedTargetClass":private]=>
                object(ReflectionClass)#567 (1) {
                  ["name"]=>
                  string(30) "Doctrine\DBAL\Driver\Statement"
                }
              }
            }
            ["targetInterfaceNames":protected]=>
            array(1) {
              [0]=>
              string(31) "\Doctrine\DBAL\Driver\Statement"
            }
            ["targetObject":protected]=>
            NULL
            ["name":protected]=>
            string(58) "Mockery_1_IteratorAggregate_Doctrine_DBAL_Driver_Statement"
            ["blackListedMethods":protected]=>
            array(74) {
              [0]=>
              string(6) "__call"
              [1]=>
              string(12) "__callStatic"
              [2]=>
              string(7) "__clone"
              [3]=>
              string(8) "__wakeup"
              [4]=>
              string(5) "__set"
              [5]=>
              string(5) "__get"
              [6]=>
              string(10) "__toString"
              [7]=>
              string(7) "__isset"
              [8]=>
              string(10) "__destruct"
              [9]=>
              string(15) "__halt_compiler"
              [10]=>
              string(8) "abstract"
              [11]=>
              string(3) "and"
              [12]=>
              string(5) "array"
              [13]=>
              string(2) "as"
              [14]=>
              string(5) "break"
              [15]=>
              string(8) "callable"
              [16]=>
              string(4) "case"
              [17]=>
              string(5) "catch"
              [18]=>
              string(5) "class"
              [19]=>
              string(5) "clone"
              [20]=>
              string(5) "const"
              [21]=>
              string(8) "continue"
              [22]=>
              string(7) "declare"
              [23]=>
              string(7) "default"
              [24]=>
              string(3) "die"
              [25]=>
              string(2) "do"
              [26]=>
              string(4) "echo"
              [27]=>
              string(4) "else"
              [28]=>
              string(6) "elseif"
              [29]=>
              string(5) "empty"
              [30]=>
              string(10) "enddeclare"
              [31]=>
              string(6) "endfor"
              [32]=>
              string(10) "endforeach"
              [33]=>
              string(5) "endif"
              [34]=>
              string(9) "endswitch"
              [35]=>
              string(8) "endwhile"
              [36]=>
              string(4) "eval"
              [37]=>
              string(4) "exit"
              [38]=>
              string(7) "extends"
              [39]=>
              string(5) "final"
              [40]=>
              string(3) "for"
              [41]=>
              string(7) "foreach"
              [42]=>
              string(8) "function"
              [43]=>
              string(6) "global"
              [44]=>
              string(4) "goto"
              [45]=>
              string(2) "if"
              [46]=>
              string(10) "implements"
              [47]=>
              string(7) "include"
              [48]=>
              string(12) "include_once"
              [49]=>
              string(10) "instanceof"
              [50]=>
              string(9) "insteadof"
              [51]=>
              string(9) "interface"
              [52]=>
              string(5) "isset"
              [53]=>
              string(4) "list"
              [54]=>
              string(9) "namespace"
              [55]=>
              string(3) "new"
              [56]=>
              string(2) "or"
              [57]=>
              string(5) "print"
              [58]=>
              string(7) "private"
              [59]=>
              string(9) "protected"
              [60]=>
              string(6) "public"
              [61]=>
              string(7) "require"
              [62]=>
              string(12) "require_once"
              [63]=>
              string(6) "return"
              [64]=>
              string(6) "static"
              [65]=>
              string(6) "switch"
              [66]=>
              string(5) "throw"
              [67]=>
              string(5) "trait"
              [68]=>
              string(3) "try"
              [69]=>
              string(5) "unset"
              [70]=>
              string(3) "use"
              [71]=>
              string(3) "var"
              [72]=>
              string(5) "while"
              [73]=>
              string(3) "xor"
            }
            ["whiteListedMethods":protected]=>
            array(0) {
            }
            ["instanceMock":protected]=>
            bool(false)
            ["parameterOverrides":protected]=>
            array(0) {
            }
            ["allMethods":protected]=>
            array(13) {
              [0]=>
              object(Mockery\Generator\Method)#507 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#564 (2) {
                  ["name"]=>
                  string(11) "getIterator"
                  ["class"]=>
                  string(17) "IteratorAggregate"
                }
              }
              [1]=>
              object(Mockery\Generator\Method)#556 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#562 (2) {
                  ["name"]=>
                  string(9) "bindValue"
                  ["class"]=>
                  string(30) "Doctrine\DBAL\Driver\Statement"
                }
              }
              [2]=>
              object(Mockery\Generator\Method)#498 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#504 (2) {
                  ["name"]=>
                  string(9) "bindParam"
                  ["class"]=>
                  string(30) "Doctrine\DBAL\Driver\Statement"
                }
              }
              [3]=>
              object(Mockery\Generator\Method)#555 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#561 (2) {
                  ["name"]=>
                  string(9) "errorCode"
                  ["class"]=>
                  string(30) "Doctrine\DBAL\Driver\Statement"
                }
              }
              [4]=>
              object(Mockery\Generator\Method)#497 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#503 (2) {
                  ["name"]=>
                  string(9) "errorInfo"
                  ["class"]=>
                  string(30) "Doctrine\DBAL\Driver\Statement"
                }
              }
              [5]=>
              object(Mockery\Generator\Method)#554 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#560 (2) {
                  ["name"]=>
                  string(7) "execute"
                  ["class"]=>
                  string(30) "Doctrine\DBAL\Driver\Statement"
                }
              }
              [6]=>
              object(Mockery\Generator\Method)#496 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#502 (2) {
                  ["name"]=>
                  string(8) "rowCount"
                  ["class"]=>
                  string(30) "Doctrine\DBAL\Driver\Statement"
                }
              }
              [7]=>
              object(Mockery\Generator\Method)#553 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#559 (2) {
                  ["name"]=>
                  string(11) "closeCursor"
                  ["class"]=>
                  string(36) "Doctrine\DBAL\Driver\ResultStatement"
                }
              }
              [8]=>
              object(Mockery\Generator\Method)#495 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#501 (2) {
                  ["name"]=>
                  string(11) "columnCount"
                  ["class"]=>
                  string(36) "Doctrine\DBAL\Driver\ResultStatement"
                }
              }
              [9]=>
              object(Mockery\Generator\Method)#552 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#558 (2) {
                  ["name"]=>
                  string(12) "setFetchMode"
                  ["class"]=>
                  string(36) "Doctrine\DBAL\Driver\ResultStatement"
                }
              }
              [10]=>
              object(Mockery\Generator\Method)#494 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#500 (2) {
                  ["name"]=>
                  string(5) "fetch"
                  ["class"]=>
                  string(36) "Doctrine\DBAL\Driver\ResultStatement"
                }
              }
              [11]=>
              object(Mockery\Generator\Method)#551 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#557 (2) {
                  ["name"]=>
                  string(8) "fetchAll"
                  ["class"]=>
                  string(36) "Doctrine\DBAL\Driver\ResultStatement"
                }
              }
              [12]=>
              object(Mockery\Generator\Method)#493 (1) {
                ["method":"Mockery\Generator\Method":private]=>
                object(ReflectionMethod)#499 (2) {
                  ["name"]=>
                  string(11) "fetchColumn"
                  ["class"]=>
                  string(36) "Doctrine\DBAL\Driver\ResultStatement"
                }
              }
            }
          }
          ["code":protected]=>
          string(23887) "<?php
/**
 * Mockery
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://github.com/padraic/mockery/blob/master/LICENSE
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to padraic@php.net so we can send you a copy immediately.
 *
 * @category   Mockery
 * @package    Mockery
 * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
 */



use Mockery\MockInterface;

class Mockery_1_IteratorAggregate_Doctrine_DBAL_Driver_Statement implements MockInterface, \IteratorAggregate, \Doctrine\DBAL\Driver\Statement
{

    /**
     * Stores an array of all expectation directors for this mock
     *
     * @var array
     */
    protected $_mockery_expectations = array();

    /**
     * Last expectation that was set
     *
     * @var object
     */
    protected $_mockery_lastExpectation = null;

    /**
     * Flag to indicate whether we can ignore method calls missing from our
     * expectations
     *
     * @var bool
     */
    protected $_mockery_ignoreMissing = false;

    /**
     * Flag to indicate whether we can defer method calls missing from our
     * expectations
     *
     * @var bool
     */
    protected $_mockery_deferMissing = false;

    /**
     * Flag to indicate whether this mock was verified
     *
     * @var bool
     */
    protected $_mockery_verified = false;

    /**
     * Given name of the mock
     *
     * @var string
     */
    protected $_mockery_name = null;

    /**
     * Order number of allocation
     *
     * @var int
     */
    protected $_mockery_allocatedOrder = 0;

    /**
     * Current ordered number
     *
     * @var int
     */
    protected $_mockery_currentOrder = 0;

    /**
     * Ordered groups
     *
     * @var array
     */
    protected $_mockery_groups = array();

    /**
     * Mock container containing this mock object
     *
     * @var \Mockery\Container
     */
    protected $_mockery_container = null;

    /**
     * Instance of a core object on which methods are called in the event
     * it has been set, and an expectation for one of the object's methods
     * does not exist. This implements a simple partial mock proxy system.
     *
     * @var object
     */
    protected $_mockery_partial = null;

    /**
     * Flag to indicate we should ignore all expectations temporarily. Used
     * mainly to prevent expectation matching when in the middle of a mock
     * object recording session.
     *
     * @var bool
     */
    protected $_mockery_disableExpectationMatching = false;

    /**
     * Stores all stubbed public methods separate from any on-object public
     * properties that may exist.
     *
     * @var array
     */
    protected $_mockery_mockableProperties = array();

    /**
     * @var array
     */
    protected $_mockery_mockableMethods = array();

    /**
     * Just a local cache for this mock's target's methods
     *
     * @var ReflectionMethod[]
     */
    protected static $_mockery_methods;

    protected $_mockery_allowMockingProtectedMethods = false;

    protected $_mockery_receivedMethodCalls;

    /**
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods
     * @var mixed
     */
    protected $_mockery_defaultReturnValue = null;

    /**
     * We want to avoid constructors since class is copied to Generator.php
     * for inclusion on extending class definitions.
     *
     * @param \Mockery\Container $container
     * @param object $partialObject
     * @return void
     */
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null)
    {
        if(is_null($container)) {
            $container = new \Mockery\Container;
        }
        $this->_mockery_container = $container;
        if (!is_null($partialObject)) {
            $this->_mockery_partial = $partialObject;
        }

        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {
            foreach ($this->mockery_getMethods() as $method) {
                if ($method->isPublic() && !$method->isStatic()) $this->_mockery_mockableMethods[] = $method->getName();
            }
        }
    }

    /**
     * Set expected method calls
     *
     * @param mixed
     * @return \Mockery\Expectation
     */
    public function shouldReceive()
    {
        /** @var array $nonPublicMethods */
        $nonPublicMethods = $this->getNonPublicMethods();

        $self = $this;
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;

        $lastExpectation = \Mockery::parseShouldReturnArgs(
            $this, func_get_args(), function ($method) use ($self, $nonPublicMethods, $allowMockingProtectedMethods) {
                $rm = $self->mockery_getMethod($method);
                if ($rm) {
                    if ($rm->isPrivate()) {
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");
                    }
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {
                        throw new \InvalidArgumentException("$method() cannot be mocked as it a protected method and mocking protected methods is not allowed for this mock");
                    }
                }

                $director = $self->mockery_getExpectationsFor($method);
                if (!$director) {
                    $director = new \Mockery\ExpectationDirector($method, $self);
                    $self->mockery_setExpectationsFor($method, $director);
                }
                $expectation = new \Mockery\Expectation($self, $method);
                $director->addExpectation($expectation);
                return $expectation;
            }
        );
        return $lastExpectation;
    }

    /**
     * Allows additional methods to be mocked that do not explicitly exist on mocked class
     * @param String $method name of the method to be mocked
     * @return Mock
     */
    public function shouldAllowMockingMethod($method)
    {
        $this->_mockery_mockableMethods[] = $method;
        return $this;
    }

    /**
     * Set mock to ignore unexpected methods and return Undefined class
     * @param mixed $returnValue the default return value for calls to missing functions on this mock
     * @return Mock
     */
    public function shouldIgnoreMissing($returnValue = null)
    {
        $this->_mockery_ignoreMissing = true;
        $this->_mockery_defaultReturnValue = $returnValue;
        return $this;
    }

    public function asUndefined()
    {
        $this->_mockery_ignoreMissing = true;
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;
        return $this;
    }

    /**
     * @return Mock
     */
    public function shouldAllowMockingProtectedMethods()
    {
        $this->_mockery_allowMockingProtectedMethods = true;
        return $this;
    }


    /**
     * Set mock to defer unexpected methods to it's parent
     *
     * This is particularly useless for this class, as it doesn't have a parent,
     * but included for completeness
     *
     * @return Mock
     */
    public function shouldDeferMissing()
    {
        $this->_mockery_deferMissing = true;
        return $this;
    }

    /**
     * Create an obviously worded alias to shouldDeferMissing()
     *
     * @return Mock
     */
    public function makePartial()
    {
        return $this->shouldDeferMissing();
    }

    /**
     * Accepts a closure which is executed with an object recorder which proxies
     * to the partial source object. The intent being to record the
     * interactions of a concrete object as a set of expectations on the
     * current mock object. The partial may then be passed to a second process
     * to see if it fulfils the same (or exact same) contract as the original.
     *
     * @param Closure $closure
     */
    public function shouldExpect(\Closure $closure)
    {
        $recorder = new \Mockery\Recorder($this, $this->_mockery_partial);
        $this->_mockery_disableExpectationMatching = true;
        $closure($recorder);
        $this->_mockery_disableExpectationMatching = false;
        return $this;
    }

    /**
     * In the event shouldReceive() accepting one or more methods/returns,
     * this method will switch them from normal expectations to default
     * expectations
     *
     * @return self
     */
    public function byDefault()
    {
        foreach ($this->_mockery_expectations as $director) {
            $exps = $director->getExpectations();
            foreach ($exps as $exp) {
                $exp->byDefault();
            }
        }
        return $this;
    }

    /**
     * Capture calls to this mock
     */
    public function __call($method, array $args)
    {
        return $this->_mockery_handleMethodCall($method, $args);
    }

    public static function __callStatic($method, array $args)
    {
        return self::_mockery_handleStaticMethodCall($method, $args);
    }

    /**
     * Forward calls to this magic method to the __call method
     */
    public function __toString()
    {
        return $this->__call('__toString', array());
    }

    /**public function __set($name, $value)
    {
        $this->_mockery_mockableProperties[$name] = $value;
        return $this;
    }

    public function __get($name)
    {
        if (isset($this->_mockery_mockableProperties[$name])) {
            return $this->_mockery_mockableProperties[$name];
        } elseif(isset($this->{$name})) {
            return $this->{$name};
        }
        throw new \InvalidArgumentException (
            'Property ' . __CLASS__ . '::' . $name . ' does not exist on this mock object'
        );
    }**/

    /**
     * Iterate across all expectation directors and validate each
     *
     * @throws \Mockery\CountValidator\Exception
     * @return void
     */
    public function mockery_verify()
    {
        if ($this->_mockery_verified) return true;
        if (isset($this->_mockery_ignoreVerification)
            && $this->_mockery_ignoreVerification == true) {
            return true;
        }
        $this->_mockery_verified = true;
        foreach($this->_mockery_expectations as $director) {
            $director->verify();
        }
    }

    /**
     * Tear down tasks for this mock
     *
     * @return void
     */
    public function mockery_teardown()
    {

    }

    /**
     * Fetch the next available allocation order number
     *
     * @return int
     */
    public function mockery_allocateOrder()
    {
        $this->_mockery_allocatedOrder += 1;
        return $this->_mockery_allocatedOrder;
    }

    /**
     * Set ordering for a group
     *
     * @param mixed $group
     * @param int $order
     */
    public function mockery_setGroup($group, $order)
    {
        $this->_mockery_groups[$group] = $order;
    }

    /**
     * Fetch array of ordered groups
     *
     * @return array
     */
    public function mockery_getGroups()
    {
        return $this->_mockery_groups;
    }

    /**
     * Set current ordered number
     *
     * @param int $order
     */
    public function mockery_setCurrentOrder($order)
    {
        $this->_mockery_currentOrder = $order;
        return $this->_mockery_currentOrder;
    }

    /**
     * Get current ordered number
     *
     * @return int
     */
    public function mockery_getCurrentOrder()
    {
        return $this->_mockery_currentOrder;
    }

    /**
     * Validate the current mock's ordering
     *
     * @param string $method
     * @param int $order
     * @throws \Mockery\Exception
     * @return void
     */
    public function mockery_validateOrder($method, $order)
    {
        if ($order < $this->_mockery_currentOrder) {
            $exception = new \Mockery\Exception\InvalidOrderException(
                'Method ' . __CLASS__ . '::' . $method . '()'
                . ' called out of order: expected order '
                . $order . ', was ' . $this->_mockery_currentOrder
            );
            $exception->setMock($this)
                ->setMethodName($method)
                ->setExpectedOrder($order)
                ->setActualOrder($this->_mockery_currentOrder);
            throw $exception;
        }
        $this->mockery_setCurrentOrder($order);
    }

    /**
     * Gets the count of expectations for this mock
     *
     * @return int
     */
    public function mockery_getExpectationCount()
    {
        $count = 0;
        foreach($this->_mockery_expectations as $director) {
            $count += $director->getExpectationCount();
        }
        return $count;
    }

    /**
     * Return the expectations director for the given method
     *
     * @var string $method
     * @return \Mockery\ExpectationDirector|null
     */
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)
    {
        $this->_mockery_expectations[$method] = $director;
    }

    /**
     * Return the expectations director for the given method
     *
     * @var string $method
     * @return \Mockery\ExpectationDirector|null
     */
    public function mockery_getExpectationsFor($method)
    {
        if (isset($this->_mockery_expectations[$method])) {
            return $this->_mockery_expectations[$method];
        }
    }

    /**
     * Find an expectation matching the given method and arguments
     *
     * @var string $method
     * @var array $args
     * @return \Mockery\Expectation|null
     */
    public function mockery_findExpectation($method, array $args)
    {
        if (!isset($this->_mockery_expectations[$method])) {
            return null;
        }
        $director = $this->_mockery_expectations[$method];

        return $director->findExpectation($args);
    }

    /**
     * Return the container for this mock
     *
     * @return \Mockery\Container
     */
    public function mockery_getContainer()
    {
        return $this->_mockery_container;
    }

    /**
     * Return the name for this mock
     *
     * @return string
     */
    public function mockery_getName()
    {
        return __CLASS__;
    }

    /**
     * @return array
     */
    public function mockery_getMockableProperties()
    {
        return $this->_mockery_mockableProperties;
    }

    public function __isset($name)
    {
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {
            return parent::__isset($name);
        }
    }

    public function mockery_getExpectations()
    {
        return $this->_mockery_expectations;
    }

    /**
     * Calls a parent class method and returns the result. Used in a passthru
     * expectation where a real return value is required while still taking
     * advantage of expectation matching and call count verification.
     *
     * @param string $name
     * @param array $args
     * @return mixed
     */
    public function mockery_callSubjectMethod($name, array $args)
    {
        return call_user_func_array('parent::' . $name, $args);
    }

    /**
     * @return string[]
     */
    public function mockery_getMockableMethods()
    {
        return $this->_mockery_mockableMethods;
    }

    /**
     * @return bool
     */
    public function mockery_isAnonymous()
    {
        $rfc = new \ReflectionClass($this);
        return false === $rfc->getParentClass();
    }

    public function __wakeup()
    {
        /**
         * This does not add __wakeup method support. It's a blind method and any
         * expected __wakeup work will NOT be performed. It merely cuts off
         * annoying errors where a __wakeup exists but is not essential when
         * mocking
         */
    }

    public function mockery_getMethod($name)
    {
        foreach ($this->mockery_getMethods() as $method) {
            if ($method->getName() == $name) {
                return $method;
            }
        }

        return null;
    }

    public function shouldHaveReceived($method, $args = null)
    {
        $expectation = new \Mockery\VerificationExpectation($this, $method);
        if (null !== $args) {
            $expectation->withArgs($args);
        }
        $expectation->atLeast()->once();
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);
        $director->verify();
        return $director;
    }

    public function shouldNotHaveReceived($method, $args = null)
    {
        $expectation = new \Mockery\VerificationExpectation($this, $method);
        if (null !== $args) {
            $expectation->withArgs($args);
        }
        $expectation->never();
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);
        $director->verify();
        return null;
    }

    protected static function _mockery_handleStaticMethodCall($method, array $args)
    {
        try {
            $associatedRealObject = \Mockery::fetchMock(__CLASS__);
            return $associatedRealObject->__call($method, $args);
        } catch (\BadMethodCallException $e) {
            throw new \BadMethodCallException(
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method
                . '() does not exist on this mock object'
            );
        }
    }

    protected function _mockery_getReceivedMethodCalls()
    {
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();
    }

    protected function _mockery_handleMethodCall($method, array $args)
    {
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));

        $rm = $this->mockery_getMethod($method);
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {
            if ($rm->isAbstract()) {
                return;
            }

            try {
                $prototype = $rm->getPrototype();
                if ($prototype->isAbstract()) {
                    return;
                }
            } catch (\ReflectionException $re) {
                // noop - there is no hasPrototype method
            }

            return call_user_func_array("parent::$method", $args);
        }

        if (isset($this->_mockery_expectations[$method])
        && !$this->_mockery_disableExpectationMatching) {
            $handler = $this->_mockery_expectations[$method];

            try {
                return $handler->call($args);
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {
                    throw $e;
                }
            }
        }

        if (!is_null($this->_mockery_partial) && method_exists($this->_mockery_partial, $method)) {
            return call_user_func_array(array($this->_mockery_partial, $method), $args);
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")) {
            return call_user_func_array("parent::$method", $args);
        } elseif ($method == '__toString') {
            // __toString is special because we force its addition to the class API regardless of the
            // original implementation.  Thus, we should always return a string rather than honor
            // _mockery_ignoreMissing and break the API with an error.
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));
        } elseif ($this->_mockery_ignoreMissing) {
            if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined)
                return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);
            else
                return $this->_mockery_defaultReturnValue;
        }
        throw new \BadMethodCallException(
            'Method ' . __CLASS__ . '::' . $method . '() does not exist on this mock object'
        );
    }

    protected function mockery_getMethods()
    {
        if (static::$_mockery_methods) {
            return static::$_mockery_methods;
        }

        $methods = array();

        if (isset($this->_mockery_partial)) {
            $reflected = new \ReflectionObject($this->_mockery_partial);
            $methods = $reflected->getMethods();
        } else {
            $reflected = new \ReflectionClass($this);
            foreach ($reflected->getMethods() as $method) {
                try {
                    $methods[] = $method->getPrototype();
                } catch (\ReflectionException $re) {
                    /**
                     * For some reason, private methods don't have a prototype
                     */
                    if ($method->isPrivate()) {
                        $methods[] = $method;
                    }
                }
            }
        }

        return static::$_mockery_methods = $methods;
    }

    /**
     * @return array
     */
    private function getNonPublicMethods()
    {
        return array_map(
            function ($method) {
                return $method->getName();
            },
            array_filter($this->mockery_getMethods(), function ($method) {
                return !$method->isPublic();
            })
        );
    }

public function getIterator(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function bindValue($param, $value, $type = NULL){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function bindParam($column, &$variable, $type = NULL){
$argc = func_num_args();
$argv = func_get_args();
if ($argc > 1) {
    $argv[1] =& $variable;
}
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function errorCode(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function errorInfo(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function execute($params = NULL){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function rowCount(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function closeCursor(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function columnCount(){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function setFetchMode($fetchStyle){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function fetch($fetchStyle = 4){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function fetchAll($fetchStyle = 4){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    public function fetchColumn($columnIndex = 0){
$argc = func_num_args();
$argv = func_get_args();
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);
return $ret;
}
    }
"
        }
      }
    }
    ["_loader":protected]=>
    object(Mockery\Loader\EvalLoader)#389 (0) {
    }
    ["_namedMocks":protected]=>
    array(0) {
    }
  }
  ["_mockery_partial":protected]=>
  NULL
  ["_mockery_disableExpectationMatching":protected]=>
  bool(false)
  ["_mockery_mockableProperties":protected]=>
  array(0) {
  }
  ["_mockery_mockableMethods":protected]=>
  array(0) {
  }
  ["_mockery_allowMockingProtectedMethods":protected]=>
  bool(false)
  ["_mockery_receivedMethodCalls":protected]=>
  NULL
  ["_mockery_defaultReturnValue":protected]=>
  NULL
}


Time: 2.07 seconds, Memory: 10.50Mb

There was 1 error:

1) FakeTwitterTest\UserTest::testFetchUserFromDB
Undefined variable: x

/var/www/awesome/tests/UserTest.php:55
[37;41m                                   [0m
[37;41mFAILURES!                          [0m
[37;41mTests: 2, Assertions: 1, Errors: 1.[0m
